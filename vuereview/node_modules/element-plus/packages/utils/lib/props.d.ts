import type { ExtractPropTypes, PropType } from '@vue/runtime-core';
import type { Mutable } from './types';
declare const wrapperKey: unique symbol;
export declare type PropWrapper<T> = {
    [wrapperKey]: T;
};
declare type ResolveProp<T> = ExtractPropTypes<{
    key: {
        type: T;
        required: true;
    };
}>['key'];
declare type ResolvePropType<T> = ResolveProp<T> extends {
    type: infer V;
} ? V : ResolveProp<T>;
declare type ResolvePropTypeWithReadonly<T> = Readonly<T> extends Readonly<Array<infer A>> ? ResolvePropType<A[]> : ResolvePropType<T>;
/**
 * @description Build prop. It can better optimize prop types
 * @description 生成 prop，能更好地优化类型
 * @example
  // limited options
  // the type will be PropType<'light' | 'dark'>
  buildProp({
    type: String,
    values: ['light', 'dark'],
  } as const)
  * @example
  // limited options and other types
  // the type will be PropType<'small' | 'medium' | number>
  buildProp({
    type: [String, Number],
    values: ['small', 'medium'],
    validator: (val: unknown): val is number => typeof val === 'number',
  } as const)
  @link see more: https://github.com/element-plus/element-plus/pull/3341
 */
export declare function buildProp<T = never, D extends (T extends PropWrapper<any> ? T[typeof wrapperKey] : ResolvePropTypeWithReadonly<T>) | V = never, R extends boolean = false, V = never, C = never>({ values, required, default: defaultValue, type, validator, }?: {
    type?: T;
    values?: readonly V[];
    required?: R;
    default?: R extends true ? never : D extends Record<string, unknown> | Array<any> ? () => D : D;
    validator?: ((val: any) => val is C) | ((val: any) => boolean);
}): {
    readonly type: PropType<V | C | (T extends PropWrapper<unknown> ? T[typeof wrapperKey] : [V] extends [never] ? ResolvePropTypeWithReadonly<T> : never)>;
    readonly required: R;
    readonly validator: (val: unknown) => boolean;
} & (R extends true ? {
    readonly default?: undefined;
} : {
    readonly default: (Exclude<D, undefined> extends never ? false : true) extends true ? Exclude<D extends any[] | Record<string, unknown> ? () => D : D, undefined> : undefined;
});
export declare const definePropType: <T>(val: any) => PropWrapper<T>;
export declare const keyOf: <T>(arr: T) => (keyof T)[];
export declare const mutable: <T extends readonly any[] | Record<string, unknown>>(val: T) => Mutable<T>;
export declare const componentSize: readonly ["large", "medium", "small", "mini"];
export {};
