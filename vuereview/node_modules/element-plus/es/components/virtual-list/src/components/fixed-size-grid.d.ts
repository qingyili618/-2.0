declare const FixedSizeGrid: import("vue").DefineComponent<{
    className: {
        type: import("vue").PropType<string>;
        default: string;
    };
    containerElement: {
        type: (ObjectConstructor | StringConstructor)[];
        default: string;
    };
    data: {
        type: import("vue").PropType<any[]>;
        default: () => any[];
    };
    direction: {
        type: import("vue").PropType<import("../types").Direction>;
        default: string;
        validator: (val: import("../types").Direction) => boolean;
    };
    height: {
        type: import("vue").PropType<string | number>;
        required: boolean;
        validator: (val: unknown) => boolean;
    };
    innerElement: {
        type: (ObjectConstructor | StringConstructor)[];
        default: string;
    };
    style: {
        type: import("vue").PropType<import("../../../../utils/types").StyleValue>;
    };
    useIsScrolling: {
        type: BooleanConstructor;
        default: boolean;
    };
    width: {
        type: import("vue").PropType<string | number>;
        required: boolean;
        validator: (val: unknown) => boolean;
    };
    perfMode: {
        type: BooleanConstructor;
        default: boolean;
    };
    columnCache: {
        type: import("vue").PropType<number>;
        default: number;
    };
    columnWidth: {
        type: import("vue").PropType<number | import("../types").ItemSize>;
        required: boolean;
    };
    estimatedColumnWidth: {
        type: import("vue").PropType<number>;
    };
    estimatedRowHeight: {
        type: import("vue").PropType<number>;
    };
    initScrollLeft: {
        type: NumberConstructor;
        default: number;
    };
    initScrollTop: {
        type: NumberConstructor;
        default: number;
    };
    rowCache: {
        type: import("vue").PropType<number>;
        default: number;
    };
    rowHeight: {
        type: import("vue").PropType<number | import("../types").ItemSize>;
        required: boolean;
    };
    totalColumn: {
        type: import("vue").PropType<number>;
        required: boolean;
    };
    totalRow: {
        type: import("vue").PropType<number>;
        required: boolean;
    };
}, {
    windowStyle: import("vue").ComputedRef<unknown[]>;
    windowRef: import("vue").Ref<HTMLElement>;
    columnsToRender: import("vue").ComputedRef<number[]>;
    innerRef: any;
    innerStyle: import("vue").ComputedRef<{
        height: string;
        pointerEvents: string;
        width: string;
    }>;
    states: import("vue").Ref<{
        isScrolling: boolean;
        scrollLeft: number;
        scrollTop: number;
        updateRequested: boolean;
        xAxisScrollDir: string;
        yAxisScrollDir: string;
    }>;
    rowsToRender: import("vue").ComputedRef<number[]>;
    getItemStyle: (rowIndex: number, columnIndex: number) => import("vue").CSSProperties;
    onScroll: (e: Event) => void;
    scrollTo: ({ scrollLeft, scrollTop }: {
        scrollLeft: any;
        scrollTop: any;
    }) => void;
    scrollToItem: (rowIndex?: number, columnIdx?: number, alignment?: import("../types").Alignment) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("scroll" | "item-rendered")[], "scroll" | "item-rendered", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    className?: unknown;
    containerElement?: unknown;
    data?: unknown;
    direction?: unknown;
    height?: unknown;
    innerElement?: unknown;
    style?: unknown;
    useIsScrolling?: unknown;
    width?: unknown;
    perfMode?: unknown;
    columnCache?: unknown;
    columnWidth?: unknown;
    estimatedColumnWidth?: unknown;
    estimatedRowHeight?: unknown;
    initScrollLeft?: unknown;
    initScrollTop?: unknown;
    rowCache?: unknown;
    rowHeight?: unknown;
    totalColumn?: unknown;
    totalRow?: unknown;
} & {
    data: any[];
    direction: import("../types").Direction;
    className: string;
    containerElement: string;
    innerElement: string;
    useIsScrolling: boolean;
    perfMode: boolean;
    columnCache: number;
    initScrollLeft: number;
    initScrollTop: number;
    rowCache: number;
} & {
    height?: string | number;
    width?: string | number;
    style?: unknown;
    columnWidth?: number | import("../types").ItemSize;
    estimatedColumnWidth?: number;
    estimatedRowHeight?: number;
    rowHeight?: number | import("../types").ItemSize;
    totalColumn?: number;
    totalRow?: number;
}> & {
    onScroll?: (...args: any[]) => any;
    "onItem-rendered"?: (...args: any[]) => any;
}, {
    data: any[];
    direction: import("../types").Direction;
    className: string;
    containerElement: string;
    innerElement: string;
    useIsScrolling: boolean;
    perfMode: boolean;
    columnCache: number;
    initScrollLeft: number;
    initScrollTop: number;
    rowCache: number;
}>;
export default FixedSizeGrid;
